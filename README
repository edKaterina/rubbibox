RTPlatform 1.x

[Установка]
В Firebase (https://firebase.google.com) активировать "Realtime Database"
и импортировать из файла JSON первичную структуру базу данных с категориями услуг
из файла install/exportDB.json. В "Правила" внести настройки из install/rulesDB.json.
Довнести в базу данных необходимые катгории по шаблону "Тестовая категория".

В Firebase активировать "Authentication" и включить способ входа "Анонимный вход".

В Firebase активировать "Functions". Перейти в консоли в папку serverPush.
Установим утилиту управления npm -g install firebase-tools
авторизуемся firebase login
инициализируем сервис Function и нужный нам проект firebase init functions
и загрузим функции на сервер firebase deploy --only functions

[Сборка]
Для сборки проекта необходимо внести индивидуальные параметры в config.xml,
заменить иконку приложения в соответствующих папках resources/android и resources/ios.

Файлы настроек для работы с Push-уведомлениями из Firebase
resources/android/google-services.json
resources/ios/GoogleService-Info.plist

Файлы настроек для работы с базой данных из Firebase
src/firebase.credentials.ts

[Загрузка мобильной версии]
готовим сборку мобильного сайта командой ionic cordova prepare browser --confirm --no-interactive --prod
перейдем в папку platforms/browser
инициализируем файл настроек firebase init, выбрав сервис "Hosting"
"public directory?"
www
"Configure as a single-page app" 
y
Overwrite?
n
загружаем на сервер firebase deploy
подключаем в Firebase свой домен

[Структура проекта]
[/serverPush/functions]
├── serverPush
│   └── functions
│       └── index.js (функция отправки Push для "Cloud Functions")
[/src/app]
├── OtherPages (общие экраны)
│   ├── chat (встроенный мессенджер)
│   ├── detail (детальное представление объявления с предложениями)
│   └── chat.service (сервис работы мессенджера)
├── Tab_AllAd (вкладка "Все объявления")
│   ├── allAd ("Все объявления" отмеченные в разделе "Подписка")
│   └── subscription ("Подписка", отметка категорий для фильтрации "Все объявления")
├── Tab_MyAd (вкладка "Мои объявления")
│   ├── add-form ("Новое объявление", создание нового объявления)
│   └── myAd ("Мои объявления", показывает объявления созданные пользователем)
├── Tab_People (вкладка "Мастера")
│   ├── people-detail (просмотр профиля мастера)
│   ├── people-edit (раздел "Стать мастером", редактирование профиля мастера)
│   └── people-list (раздел "Мастера", показывает список мастеров)
├── Tab_Setting (вкладка "Настройки")
│   ├── notifications (Уведомления)
│   └── setting (Раздел "Настройки")
├── components (компоненты)
│   ├── form-upload (интерфейс загрузки фотографии)
│   ├── responses-list (отклики (предложения на объявление))
│   └── user-detail (компонент отображения имени пользователя по его id)
├── pipe (форматирование данных)
│   └── sort-notify (сортировка по дате уведомлений)
├── model (модели данных)
│   ├── ad-model (объявление)
│   ├── category-model (категория объявления)
│   ├── file-upload (загружаемый файл)
│   ├── message-model (сообщение в мессенджере)
│   ├── notify-model (уведомление)
│   ├── people-model (мастер)
│   └── response-model (предложение на объявление)
├── modules (модули)
│   └── core (общие функции)
├── services (сервисы)
│   ├── ad.service (объявления)
│   ├── auth (авторизация)
│   ├── category (категории)
│   ├── core (общие)
│   ├── master (мастера)
│   ├── notification (уведомления)
│   ├── response (предложения/отклики)
│   └── upload-file.service (функции загрузки файла)
└── tabs (контроллер вкладок ion-tabs)

[Компоненты]

== Ф.И.О. пользователя ==
Использование: 
<rtp-user-detail [idUser]="response.user"></rtp-user-detail>

Параметры:
idUser - идентификатор пользователя

== Загрузка фотографий ==
Использование:
<rtp-form-upload count=1 [(files)]="note.img"></rtp-form-upload>

Пример интеграции:
<ion-item>
  <ion-label position="stacked">Фото
    <rtp-form-upload count=1 [(files)]="note.img"></rtp-form-upload>
  </ion-label>
</ion-item>

Параметры:
count - количество допустимых фотографий
files - массив ссылок на фотографии

== Предложения (отклики) на объявление ==
Использование: 
<rtp-responses-list [id]="id"></rtp-responses-list>

Параметры:
id - идентификатор объявления
